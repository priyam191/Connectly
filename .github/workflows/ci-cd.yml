name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: Install server dependencies
        run: |
          cd server
          npm ci

      - name: Install client dependencies
        run: |
          cd client
          npm ci

      - name: Run server linting
        run: |
          cd server
          npm run lint || echo "No lint script found"

      - name: Run client linting
        run: |
          cd client
          npm run lint

      - name: Run server tests
        run: |
          cd server
          npm test || echo "No tests found"

      - name: Build client
        run: |
          cd client
          npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    # environment:
    #   name: "staging"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          echo "Would run: docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d"
          # Add your staging deployment commands here

  deploy-production:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # Navigate to application directory
            cd /var/www/connectly
            
            # Pull latest changes
            git pull origin main
            
            # Create production environment file
            cat > .env.production << EOF
            MONGO_URI=mongodb://connectly_admin:${{ secrets.MONGO_ROOT_PASSWORD }}@mongodb:27017/connectly?authSource=admin
            MONGO_ROOT_USERNAME=connectly_admin
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            MONGO_DB_NAME=connectly
            NODE_ENV=production
            SERVER_PORT=5000
            CLIENT_PORT=3000
            NEXT_PUBLIC_API_URL=http://${{ secrets.AWS_EC2_HOST }}:5000
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=7d
            CORS_ORIGIN=http://${{ secrets.AWS_EC2_HOST }}:3000
            MAX_FILE_SIZE=5242880
            UPLOAD_PATH=/var/lib/connectly/uploads
            EOF
            
            # Create production directories
            sudo mkdir -p /var/lib/connectly/{mongodb,uploads,mongodb-config}
            sudo chown -R ubuntu:ubuntu /var/lib/connectly
            
            # Stop existing containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down || true
            
            # Start production environment
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env.production up -d --build
            
            # Clean up unused images
            docker image prune -f
